name: Deploy to ECS

on:
  push:
    branches:
      - main   # adjust branch if needed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1   # change if needed

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 \
            | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Build, Tag, and Push Image
        run: |
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/example-nodejs:latest
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Register new Task Definition revision
        run: |
          TASK_DEF=$(aws ecs describe-task-definition --task-definition nodejs-service-td)
          NEW_TASK_DEF=$(echo $TASK_DEF | \
            jq --arg IMAGE "$IMAGE_URI" --arg NAME "nodejs-container" \
              '.taskDefinition 
               | (.containerDefinitions[] | select(.name==$NAME) | .image)=$IMAGE
               | del(.taskDefinitionArn,.revision,.status,.requiresAttributes,.compatibilities,.registeredAt,.registeredBy)')          
          echo "$NEW_TASK_DEF" > new-task-def.json
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query "taskDefinition.taskDefinitionArn" --output text)
          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster CMS3TestFargateCluster \
            --service nodejs-services \
            --task-definition $NEW_TASK_DEF_ARN
