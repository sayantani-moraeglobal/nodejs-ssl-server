name: Deploy to Amazon ECS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get AWS Account ID
        id: aws_account
        run: |
          echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | \
          docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com

      - name: Build and push Docker image
        run: |
          IMAGE_REPO_NAME=example-nodejs
          IMAGE_TAG=latest
          FULL_IMAGE=$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
          echo "FULL_IMAGE=$FULL_IMAGE" >> $GITHUB_ENV

          echo "üöÄ Building Docker image..."
          docker build -t $FULL_IMAGE .

          echo "üì§ Pushing Docker image..."
          docker push $FULL_IMAGE

      - name: Update ECS service with new image
        run: |
          CLUSTER_NAME=CMS3TestEC2Cluster
          SERVICE_NAME=nodejs-service
          TASK_FAMILY=nodejs-service-td
          CONTAINER_NAME=nodejs-container
          IMAGE_URI=$FULL_IMAGE

          echo "üîç Using task family: $TASK_FAMILY"
          echo "üîç Updating container: $CONTAINER_NAME"
          echo "üîç New image: $IMAGE_URI"

          # Fetch latest task definition
          TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY)

          # Replace the container image
          NEW_TASK_DEF=$(echo "$TASK_DEF" | \
            jq --arg IMAGE_URI "$IMAGE_URI" --arg NAME "$CONTAINER_NAME" \
            '.taskDefinition 
            | .containerDefinitions |= map(if .name == $NAME then .image=$IMAGE_URI else . end) 
            | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')

          # Register new revision
          NEW_TASK_DEF_ARN=$(echo "$NEW_TASK_DEF" | \
            aws ecs register-task-definition --cli-input-json file:///dev/stdin | jq -r '.taskDefinition.taskDefinitionArn')

          echo "‚úÖ Registered new task definition: $NEW_TASK_DEF_ARN"

          # Update ECS service to use new task definition
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $NEW_TASK_DEF_ARN

          echo "üéâ Deployment triggered. ECS will now pull the new image."
